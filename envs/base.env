export PATH="/usr/bin:/usr/sbin"
export TERM="xterm-256color"
export HOME="/root"
export EDITOR="${EDITOR:-vi}"
export LDFLAGS="-Wl,-O1 -Wl,--as-needed" # match gentoo's defaults (https://github.com/gentoo/gentoo/blob/master/profiles/default/linux/make.defaults)

# These are set in /etc/to/config.toml and inserted by `to`
export C{,XX}FLAGS="${CFLAGS:?}"
export MAKEFLAGS="${MAKEFLAGS:?}"

export B="/B"
export A="/A"
export S="/S"
export D="/D"


# Check if a command is a function
is_function() {
    type -t "$1" 2>/dev/null | grep -qx function
}

# Check whether we're in the build chroot
in_build_chroot() {
    [ -d /D ] && [ -f /pkg ]
}

# Replace instances of -O3 with -O2 in C{,XX}FLAGS
o2() {
    export CFLAGS=${CFLAGS//-O3/-O2}
    export CXXFLAGS=$CFLAGS
}

# Remove -flto.* from C{,XX}flags
ltno() {
    export CFLAGS=$(for word in $CFLAGS; do [[ $word == -flto* ]] || printf '%s ' "$word"; done)
    export CXXFLAGS=$CFLAGS
}

# Retrieve the version of another package
vof() {
    LOG_LEVEL=OFF to data -V "$1"
}

# Exit if without a function; return if within
die() {
    printf "\x1b[37;1m[\x1b[31mERROR\x1b[37m] %s" "$1" >&2
    if (return 0 2>/dev/null); then
        return "${2:-1}"
    else
        exit "${2:-1}"
    fi
}

# git ls-remote wrapper
gr() {
    git ls-remote --tags --refs "${u:-${1:?}}" | sed 's,.*/,,'
}

# curl version fetch wrapper
#
# if no arguments are passed, match two or three points
# match {2,3} points with -{2,3}
cr() {
    local pts=0
    while getopts "23" opt; do
        case $opt in
            2) pts=2 ;;
            3) pts=3 ;;
        esac
    done
    shift $((OPTIND -1))

    case $pts in
        0) curl -fsSL "${u:-${1:?}}" | grep -oP -- ""${n:-${2:?}}"-[0-9]+\.[0-9]+(\.[0-9]+)?" ;;
        2) curl -fsSL "${u:-${1:?}}" | grep -oP -- ""${n:-${2:?}}"-[0-9]+\.[0-9]+" ;;
        3) curl -fsSL "${u:-${1:?}}" | grep -oP -- ""${n:-${2:?}}"-[0-9]+\.[0-9]+\.[0-9]+" ;;
    esac
}

# version filter stable
vfs() {
    grep -Eiv 'rc|dev|beta|alpha|pre'
}

# version filter even minor
vfem() {
    awk -F. '/[0-9]+\.[0-9]+\.[0-9]+/ { if ($2 % 2 == 0) print }'
}

# git checkout
# defaults to version, but can be overridden
gco() {
    local b="${1:-$v}"

    # fetch a commit or tag
    if [[ "$b" =~ ^[0-9a-fA-F]{40}$ ]]; then
        git fetch origin "$b" || die "Failed to fetch commit $b"
    else
        # fetch a specific tag
        # https://stackoverflow.com/questions/45338495/fetch-a-single-tag-from-remote-repository
        git fetch origin --no-tags "refs/tags/$b:refs/tags/$b" || die "Failed to fetch tag $b"
    fi

    git checkout     "$b" &>/dev/null || die "Failed to check out $b"
    echo "Checked out $b" >&2
}

# fix overlinking by applying a sed to libtool
unoverlink() {
    sed -i "s/ -shared / $LDFLAGS&/g" libtool
}

# remove static libraries
rma() {
    find "${1:-$D}" -type f -name '*.a' -exec rm -vf {} +
}

# install license
# assumes sane defaults, but can be overridden
il() {
    local l=()

    if [ $# -eq 0 ]; then
        l=({.,}./LICENSE* {.,}./COPYING* {.,}./LICENCE* {.,}./COPYRIGHT*)
    else
        l=("$@")
    fi

    # shellcheck disable=2128
    if [ -z "${l-}" ]; then
        die "Couldn't autodetect license"
    fi

    install -vDm644 "${l[@]}" -t "${D:?}/usr/share/licenses/${n:?}"
}

# patch wrapper
pat() {
    patch --verbose -Np1 -i "$@"
}

cfg() {
    local CP _default_cfg_opts _cfg_opts
    if [ -f ./configure ]; then
        CP=.
    elif [ -f ../configure ]; then
        CP=..
    else
        die "Couldn't find configure"
    fi

    # shellcheck disable=2207
    if [ -z "${NO_DEFAULT-}" ]; then
        _default_cfg_opts=(
            --mandir=/usr/share/man
            --sbindir=/usr/sbin
            --bindir=/usr/bin
            --sysconfdir=/etc
            --localstatedir=/var
            --disable-static
            --prefix=/usr
        )
    fi

    # _default_cfg_opts are defaults
    # _cfg are maintainer-provided
    # _cfg_opts are the two combined
    _cfg_opts=("${_default_cfg_opts[@]}" "${_cfg[@]}")
    echo "Using configure options: ${_cfg_opts[*]}" >&2

    "${CP:?}/configure" "${_cfg_opts[@]}" || die "Configure failed"
    printf "%s\n" "${_cfg_opts[@]}" > /_cfg_opts
}

# shellcheck disable=2120
# Make wrapper
mk() {
    make "$@" || die "Make $* failed"
}

# shellcheck disable=2120
# Make DESTDIR install wrapper
mi() {
    make DESTDIR="${D:?}" "$@" install || die "Make install failed"
}

# shellcheck disable=SC2119
# Shorthand for default instructions
def() {
    cfg
    if [ -f libtool ]; then unoverlink; fi
    mk
    mi
}

# shellcheck disable=SC1090
# Function to inherit other environments
with() {
    for f in "$@"; do
        if [ -f "/usr/share/to/envs/$f.env" ]; then
            source "/usr/share/to/envs/$f.env" || die "Failed to source $f"
        else
            die "Environment '$f' doesn't exist"
        fi
    done
}

# Function to create a test user and execute a command
# (Currently not supported)
# tester() {
#     local user="tester"
#     local dir="${DIR:-.}"
#
#     id "$user" &>/dev/null || useradd -c "User for running tests" -M -r -s /bin/bash "$user"
#
#     chown -R "$user:$user" "$dir"
#     su "$user" -c "cd '$dir' && $*"
# }

export -f die gr gco vfs pat cfg mk mi def with il rma
