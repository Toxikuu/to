export PATH="/usr/bin:/usr/sbin"
export TERM="xterm-256color"
export HOME="/root"
export EDITOR="${EDITOR:-nvim}"
export LDFLAGS="-Wl,--as-needed"
# These are set in /etc/to/config.toml and inserted by `to`
export C{,XX}FLAGS="${TO_CFLAGS:?}" # key: cflags
export MAKEFLAGS="-j${TO_JOBS:?}"   # key: jobs

export B="/B"
export A="/A"
export S="/S"
export D="/D"


# Check if a command is a function
is_function() {
    type -t "$1" | grep -x function &>/dev/null
}


die() {
    echo -e "\x1b[37;1m[\x1b[31mERROR\x1b[37m] $1" >&2
    exit "${2:-1}"
}

# git ls-remote wrapper
gr() {
    git ls-remote --tags --refs "${u:-${1:?}}" | sed 's,.*/,,'
}

# version filter stable
vfs() {
    grep -Eiv 'rc|dev|beta|alpha|pre'
}

# version filter even minor
vfem() {
    awk -F. '/[0-9]+\.[0-9]+\.[0-9]+/ { if ($2 % 2 == 0) print }'
}

# git checkout
# defaults to version, but can be overridden
gco() {
    local b="${1:-$v}"
    git checkout "$b" &>/dev/null
    echo "Checked out $b" >&2
}

# install license
# assumes sane defaults, but can be overridden
il() {
    local l=()

    if [ $# -eq 0 ]; then
        l=({.,}./LICENSE* {.,}./COPYING* {.,}./LICENCE* {.,}./COPYRIGHT*)
    else
        l=("$@")
    fi

    # shellcheck disable=2128
    if [ -z "${l-}" ]; then
        die "Couldn't autodetect license"
    fi

    install -vDm644 "${l[@]}" -t "${D:?}/usr/share/licenses/${n:?}"
}

# patch wrapper
pat() {
    patch --verbose -Np1 -i "$@"
}

# configure contains
c_c() {
    if grep -F -- "${1%=*}" "${CP:?}/configure" &>/dev/null; then
        echo "$1"
    fi
}

cfg() {
    if [ -f ./configure ]; then
        CP=.
    elif [ -f ../configure ]; then
        CP=..
    else
        die "Couldn't find configure"
    fi

    # shellcheck disable=2207
    # Generate configure options based on what configure supports
    local _default_cfg_opts=(
        $(c_c --mandir=/usr/share/man)
        $(c_c --sbindir=/usr/bin)
        $(c_c --bindir=/usr/bin)
        $(c_c --sysconfdir=/etc)
        $(c_c --localstatedir=/var)
        $(c_c --disable-static)
        $(c_c --enable-shared)
        $(c_c --disable-rpath)
        $(c_c --disable-nls)
        --prefix=/usr
    )

    echo "Using default config options: ${_default_cfg_opts[*]}"

    # shellcheck disable=SC2154
    "${CP:?}/configure" "${_default_cfg_opts[@]}" "${_cfg[@]}"
}

# shellcheck disable=2120
# Make wrapper
mk() {
    make "$@" || die "Make $* failed"
}

# shellcheck disable=2120
# Make DESTDIR install wrapper
mi() {
    make DESTDIR="${D:?}" "$@" install || die "Make install failed"
}

# shellcheck disable=SC2119
# Shorthand for default instructions
def() {
    cfg
    mk
    mi
}

# shellcheck disable=SC1090
# Function to inherit other environments
with() {
    for f in "$@"; do
        if [ -f "/usr/share/to/envs/$f.env" ]; then
            source "/usr/share/to/envs/$f.env" || die "Failed to source $f"
        else
            die "Environment '$f' doesn't exist"
        fi
    done
}

# Function to create a test user and execute a command
# (Currently not supported)
# tester() {
#     local user="tester"
#     local dir="${DIR:-.}"
#
#     id "$user" &>/dev/null || useradd -c "User for running tests" -M -r -s /bin/bash "$user"
#
#     chown -R "$user:$user" "$dir"
#     su "$user" -c "cd '$dir' && $*"
# }

export -f die gr gco vfs pat cfg mk mi def with
