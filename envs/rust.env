# Environment for rust

export CARGO_HOME="/opt/cargo"
export RUSTUP_HOME="/opt/rustup"
export PATH="/opt/cargo/bin:$PATH"

# If building with lto, enable extra stuff for rust
if echo "$RUSTFLAGS" | grep -qE -- '-C lto=(true|fat)'; then
    echo "Appending rust-specific lto flags" >&2
    export RUSTFLAGS+=" -Zdylib-lto"
    export CFLAGS+=" -ffat-lto-objects"
    export CXXFLAGS+=" -ffat-lto-objects"
    # TODO: Implement a system where the environment gets `printenv`ed to
    # /fail-debug or similar on failure and delete this
    # echo "RUSTFLAGS: $RUSTFLAGS" >&2
    # echo "CFLAGS:    $CFLAGS"    >&2
    # echo "CXXFLAGS:  $CXXFLAGS"  >&2
fi

rustup default "${RUST_TOOLCHAIN:-nightly}"

# cargo build --release wrapper
cbr() {
    cargo build --release "$@"
}

# Redefine ltno to remove lto flags for rust
ltno() {
    export CFLAGS=$(for word in $CFLAGS; do [[ $word == -flto* ]] || printf '%s ' "$word"; done)
    export CFLAGS=$(for word in $CFLAGS; do [[ $word == -ffat-lto-objects ]] || printf '%s ' "$word"; done)
    export CXXFLAGS=$CFLAGS
    export RUSTFLAGS="$(echo "$RUSTFLAGS" | sed -e 's|-C lto=\w\+||g' -e 's|-C embed-bitcode=true||g')"
}

export -f cbr ltno
